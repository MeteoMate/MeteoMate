# ---------- Stage 1: Build the SPA ----------
# Uses Node to build static site (JS/CSS/assets)
FROM node:lts AS build

WORKDIR /app

# Copy manifests first to leverage Docker layer caching
COPY package.json ./
# Install all deps 
RUN yarn install

# # Alternatively, use yarn.lock and "--frozen-lockfile" for reproducibility
# COPY package.json yarn.lock ./
# # Install all deps 
# RUN yarn install --frozen-lockfile

# Now copy the rest and build
COPY . .
RUN yarn build
# Output is assumed at /app/build 

# ---------- Stage 2: Render Nginx config from template ----------
# Python stage to turn nginx.conf.j2 + build args into nginx.conf
FROM python:3.10-slim AS config

WORKDIR /app

# Build args passed at build time
ARG API_UPSTREAM_HOST
ARG API_UPSTREAM_PORT
ARG API_PREFIX
ARG APP_ENV
ARG SERVER_NAME

# Template + renderer
COPY nginx/nginx.conf.j2 /app/nginx.conf.j2
COPY nginx/generate_nginx_conf.py /app/generate_nginx_conf.py

# Only need Jinja2 to render the template
RUN pip install --no-cache-dir --upgrade pip jinja2 \
    && python generate_nginx_conf.py
# Expects to write /app/nginx.conf (and any additional artifacts we generate)

# ---------- Stage 3: Runtime (Nginx serving static files) ----------
FROM nginx:1.29-alpine AS runtime

# Static site lives here in the base image
WORKDIR /usr/share/nginx/html

# Bring in built assets from Stage 1
COPY --from=build /app/build ./

# Replace default server config with the rendered one
COPY --from=config /app/nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
# ENTRYPOINT/CMD are provided by the base nginx image
